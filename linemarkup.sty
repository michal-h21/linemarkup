\ProvidesPackage{linemarkup}
\RequirePackage{luacode}

% we want to support multiple concurrent line markups in a document.
% the currently selected markup will be stored in this token list, so it
% can be accessed from Lua
\newtoks\linemarkup@currentmarkup

\newcommand\linemarkupselect[1]{%
\linemarkup@currentmarkup={#1}
}
\linemarkupselect{default}


\begin{luacode*}
linemarkup = linemarkup or require "linemarkup-lib"
linemarkup_parsers = {}
linemarkup.active = false
local parsers = {}



local parse = linemarkup.declare_parser("default")
parse:add_rule("#", "\\section{%1}","section")
parse:add_rule("-",  "item: {%1}\\\\", "itemize")
-- the code block started by ``` 
parse:add_rule("```", "\\linemarkupselect{verbatim}", "verbatim_start")


parsers.default = parse

local verb = linemarkup.declare_parser("verbatim")
verb:add_rule('```', "\\end{verbatim}\n\n www\\linemarkupselect{default}",'verbatim_end')

parsers.verbatim = verb

-- pattern that is checked in the process_input_buffer to stop the processing
linemarkup.end_pattern = ""
linemarkup.current_lines = {}

local function process(line)
  -- local parser_name = tex.toks["linemarkup@currentmarkup"]
  -- return linemarkup.process_line(line, parser_name) 
  if linemarkup.active then
    if not line:match(linemarkup.end_pattern) then
      -- discard this line from the output, but save it in the current linemarkup buffer
      table.insert(linemarkup.current_lines, line)
      return ""
    end
  end
end
-- luatexbase.add_to_callback("process_input_buffer", process, "linemarkup")

\end{luacode*}

% commands for enabling and disabling of the line processing
\NewDocumentCommand{\LinemarkupEnable}{}{\directlua{linemarkup.active=true}}
\NewDocumentCommand{\LinemarkupDisable}{}{\directlua{linemarkup.active=false}}

% activate linemarkup processing only at beginning of document. it is not
% useful in the preamble, it may slow package loading and cause compilation errors
\LinemarkupDisable
\AddToHook{begindocument/end}{\LinemarkupEnable}

% command that accepts line markup and prints the processed TeX markup to the document 
% optional argument is syntax that should be used
\NewDocumentCommand{\LinemarkupPrint}{O{\the\linemarkup@currentmarkup} +v}{%
  \directlua{%
    local text = [[#2]]
    % linemarkup.process_lines("hello","#1" )
    local result = linemarkup.process_text(text, "\luatexluaescapestring{#1}")
    for _, newline in ipairs(result) do 
      tex.sprint(newline)
    end
  }
  % \end{luacode*}
}

% define new line markup block
\NewDocumentCommand{\LinemarkupAddBlock}{v}{
  \directlua{print("*********** ahoj: {\unexpanded{#1}}")}
}

\NewDocumentCommand\pokus{+v}{%
  \luaexec{
    local result = linemarkup.process_text([[
#1
]], "default")
  linemarkup.print_tex(result)
}}


\endinput
