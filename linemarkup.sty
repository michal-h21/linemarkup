\ProvidesPackage{linemarkup}
\RequirePackage{luacode}

% we want to support multiple concurrent line markups in a document.
% the currently selected markup will be stored in this token list, so it
% can be accessed from Lua
\newtoks\linemarkup@currentmarkup

\newcommand\linemarkupselect[1]{%
\linemarkup@currentmarkup={#1}
}
\linemarkupselect{default}


\begin{luacode*}
linemarkup = linemarkup or require "linemarkup-lib"
linemarkup_parsers = {}
linemarkup.active = false
local parsers = {}



local parse = linemarkup.declare_parser("default")
parse:add_rule("#", "\\section{%1}","section")
parse:add_rule("-",  "item: {%1}\\\\", "itemize")
-- the code block started by ``` 
parse:add_rule("```", "\\linemarkupselect{verbatim}\\begin{verbatim}", "verbatim_start")


parsers.default = parse

local verb = linemarkup.declare_parser("verbatim")
verb:add_rule("```", "\\end{verbatim}\\linemarkupselect{default}","verbatim_end")

parsers.verbatim = verb

local function process(line)
  local parser_name = tex.toks["linemarkup@currentmarkup"]
  return linemarkup.process_line(line, parser_name) 
end
luatexbase.add_to_callback("process_input_buffer", process, "linemarkup")

function linemarkup.lines(text)
  local lines = {}
  for line in text:gmatch("([^\n]+)") do
    lines[#lines+1] = line
  end
  return lines
end

function linemarkup.process_lines(text, markup)
  local lines = linemarkup.lines(text)
  for _, line in ipairs(lines) do
    tex.sprint(linemarkup.process_line(line, markup))
  end
end

\end{luacode*}

% commands for enabling and disabling of the line processing
\NewDocumentCommand{\LinemarkupEnable}{}{\directlua{linemarkup.active=true}}
\NewDocumentCommand{\LinemarkupDisable}{}{\directlua{linemarkup.active=false}}

% activate linemarkup processing only at beginning of document. it is not
% useful in the preamble, it may slow package loading and cause compilation errors
\LinemarkupDisable
\AddToHook{begindocument/end}{\LinemarkupEnable}

% command that accepts line markup and prints the processed TeX markup to the document 
% optional argument is syntax that should be used
\NewDocumentCommand{\LinemarkupPrint}{O{\the\linemarkup@currentmarkup} m}{%
  \directlua{%
    local text = [[\luatexluaescapestring{#2}]]
    % linemarkup.process_lines("hello","#1" )
    linemarkup.process_lines(text, "\luatexluaescapestring{#1}")
  }
  % \end{luacode*}
}

% define new line markup block
\NewDocumentCommand{\LinemarkupAddBlock}{v}{
  \directlua{print("*********** ahoj: {\unexpanded{#1}}")}
}


\endinput
